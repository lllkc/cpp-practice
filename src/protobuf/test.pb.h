// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsresp_FooImpl();
void InitDefaultsresp_Foo();
void InitDefaultsrespImpl();
void InitDefaultsresp();
inline void InitDefaults() {
  InitDefaultsresp_Foo();
  InitDefaultsresp();
}
}  // namespace protobuf_test_2eproto
namespace test {
class resp;
class respDefaultTypeInternal;
extern respDefaultTypeInternal _resp_default_instance_;
class resp_Foo;
class resp_FooDefaultTypeInternal;
extern resp_FooDefaultTypeInternal _resp_Foo_default_instance_;
}  // namespace test
namespace test {

// ===================================================================

class resp_Foo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.resp.Foo) */ {
 public:
  resp_Foo();
  virtual ~resp_Foo();

  resp_Foo(const resp_Foo& from);

  inline resp_Foo& operator=(const resp_Foo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  resp_Foo(resp_Foo&& from) noexcept
    : resp_Foo() {
    *this = ::std::move(from);
  }

  inline resp_Foo& operator=(resp_Foo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const resp_Foo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const resp_Foo* internal_default_instance() {
    return reinterpret_cast<const resp_Foo*>(
               &_resp_Foo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(resp_Foo* other);
  friend void swap(resp_Foo& a, resp_Foo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline resp_Foo* New() const PROTOBUF_FINAL { return New(NULL); }

  resp_Foo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const resp_Foo& from);
  void MergeFrom(const resp_Foo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(resp_Foo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 money = 2;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 2;
  ::google::protobuf::uint32 money() const;
  void set_money(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:test.resp.Foo)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_money();
  void clear_has_money();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 money_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsresp_FooImpl();
};
// -------------------------------------------------------------------

class resp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:test.resp) */ {
 public:
  resp();
  virtual ~resp();

  resp(const resp& from);

  inline resp& operator=(const resp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  resp(resp&& from) noexcept
    : resp() {
    *this = ::std::move(from);
  }

  inline resp& operator=(resp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const resp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const resp* internal_default_instance() {
    return reinterpret_cast<const resp*>(
               &_resp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(resp* other);
  friend void swap(resp& a, resp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline resp* New() const PROTOBUF_FINAL { return New(NULL); }

  resp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const resp& from);
  void MergeFrom(const resp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(resp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef resp_Foo Foo;

  // accessors -------------------------------------------------------

  // repeated .test.resp.Foo data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::test::resp_Foo& data(int index) const;
  ::test::resp_Foo* mutable_data(int index);
  ::test::resp_Foo* add_data();
  ::google::protobuf::RepeatedPtrField< ::test::resp_Foo >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::test::resp_Foo >&
      data() const;

  // @@protoc_insertion_point(class_scope:test.resp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::test::resp_Foo > data_;
  friend struct ::protobuf_test_2eproto::TableStruct;
  friend void ::protobuf_test_2eproto::InitDefaultsrespImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// resp_Foo

// optional string name = 1;
inline bool resp_Foo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void resp_Foo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void resp_Foo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void resp_Foo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& resp_Foo::name() const {
  // @@protoc_insertion_point(field_get:test.resp.Foo.name)
  return name_.GetNoArena();
}
inline void resp_Foo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.resp.Foo.name)
}
#if LANG_CXX11
inline void resp_Foo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.resp.Foo.name)
}
#endif
inline void resp_Foo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.resp.Foo.name)
}
inline void resp_Foo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.resp.Foo.name)
}
inline ::std::string* resp_Foo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:test.resp.Foo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* resp_Foo::release_name() {
  // @@protoc_insertion_point(field_release:test.resp.Foo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void resp_Foo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:test.resp.Foo.name)
}

// optional uint32 money = 2;
inline bool resp_Foo::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void resp_Foo::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void resp_Foo::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void resp_Foo::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 resp_Foo::money() const {
  // @@protoc_insertion_point(field_get:test.resp.Foo.money)
  return money_;
}
inline void resp_Foo::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:test.resp.Foo.money)
}

// -------------------------------------------------------------------

// resp

// repeated .test.resp.Foo data = 1;
inline int resp::data_size() const {
  return data_.size();
}
inline void resp::clear_data() {
  data_.Clear();
}
inline const ::test::resp_Foo& resp::data(int index) const {
  // @@protoc_insertion_point(field_get:test.resp.data)
  return data_.Get(index);
}
inline ::test::resp_Foo* resp::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:test.resp.data)
  return data_.Mutable(index);
}
inline ::test::resp_Foo* resp::add_data() {
  // @@protoc_insertion_point(field_add:test.resp.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::test::resp_Foo >*
resp::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:test.resp.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::test::resp_Foo >&
resp::data() const {
  // @@protoc_insertion_point(field_list:test.resp.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
